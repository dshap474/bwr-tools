#!/usr/bin/env node

/**
 * Simple Node.js test runner for BWR plot generation
 * 
 * This script generates test plots using both TypeScript and Python implementations
 * and saves the results to the test_plots directory.
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// Test data embedded directly in the script
const TEST_DATA = {
  simple: {
    x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    y: [2.1, 4.3, 5.8, 8.2, 10.1, 11.9, 14.2, 16.1, 17.8, 20.3]
  },
  
  financial: {
    date: ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05'],
    price: [100.0, 102.5, 98.3, 105.7, 108.2],
    volume: [1500000, 1800000, 2100000, 1700000, 1900000]
  },
  
  large_values: {
    x: [1, 2, 3, 4, 5],
    millions: [1200000, 2800000, 4100000, 5900000, 7300000],
    billions: [1.2e9, 2.8e9, 4.1e9, 5.9e9, 7.3e9]
  }
};

class SimplePlotTester {
  constructor() {
    this.outputDir = path.join(__dirname, 'test_plots');
    this.serverUrl = 'http://localhost:5001';
    
    // Create output directory
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
  }

  async checkPythonServer() {
    try {
      const response = await fetch(`${this.serverUrl}/health`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async generatePythonPlot(testName, data) {
    console.log(`🐍 Generating Python plot: ${testName}`);
    
    try {
      const requestData = {
        type: 'scatter',
        data: data,
        config: {
          title: `BWR Test Plot - ${testName}`,
          subtitle: 'Generated by Python Implementation'
        }
      };

      const response = await fetch(`${this.serverUrl}/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(`Python generation failed: ${result.error}`);
      }

      // Save image
      if (result.image) {
        const imagePath = path.join(this.outputDir, `${testName}_python.png`);
        const imageBuffer = Buffer.from(result.image, 'base64');
        fs.writeFileSync(imagePath, imageBuffer);
        
        const sizeKB = Math.round(imageBuffer.length / 1024);
        console.log(`   ✅ Image saved: ${path.basename(imagePath)} (${sizeKB} KB)`);
      }

      // Save Plotly config
      if (result.plotly_json) {
        const configPath = path.join(this.outputDir, `${testName}_python_config.json`);
        fs.writeFileSync(configPath, result.plotly_json);
        console.log(`   ✅ Config saved: ${path.basename(configPath)}`);
      }

      return true;

    } catch (error) {
      console.log(`   ❌ Failed: ${error.message}`);
      return false;
    }
  }

  async runTests() {
    console.log('🚀 BWR Plot Generation Test');
    console.log('=' .repeat(40));

    // Check Python server
    const serverAvailable = await this.checkPythonServer();
    if (!serverAvailable) {
      console.log('❌ Python server not available at', this.serverUrl);
      console.log('💡 Start with: cd tools/dev-server && python3 server.py');
      return;
    }

    console.log('✅ Python server is available');

    const results = [];

    // Test each dataset
    for (const [testName, data] of Object.entries(TEST_DATA)) {
      console.log(`\n📊 Testing dataset: ${testName}`);
      console.log(`   Data shape: ${Object.keys(data).length} columns, ${data[Object.keys(data)[0]].length} rows`);
      
      const success = await this.generatePythonPlot(testName, data);
      results.push({ testName, success });
    }

    // Summary
    console.log('\n📊 Test Summary:');
    console.log('=' .repeat(30));
    
    const successful = results.filter(r => r.success).length;
    const total = results.length;
    
    console.log(`✅ Successful: ${successful}/${total}`);
    console.log(`❌ Failed: ${total - successful}/${total}`);

    // List generated files
    console.log('\n📁 Generated files:');
    const files = fs.readdirSync(this.outputDir);
    files.forEach(file => {
      const filePath = path.join(this.outputDir, file);
      const stats = fs.statSync(filePath);
      const sizeKB = Math.round(stats.size / 1024);
      console.log(`   📄 ${file} (${sizeKB} KB)`);
    });

    console.log(`\n🎯 All files saved to: ${this.outputDir}`);
  }
}

// Run the test
async function main() {
  const tester = new SimplePlotTester();
  await tester.runTests();
}

if (require.main === module) {
  main().catch(error => {
    console.error('💥 Test failed:', error);
    process.exit(1);
  });
}